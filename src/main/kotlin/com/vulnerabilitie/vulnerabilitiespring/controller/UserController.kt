package com.vulnerabilitie.vulnerabilitiespring.controller

import com.vulnerabilitie.vulnerabilitiespring.service.Auth
import com.vulnerabilitie.vulnerabilitiespring.service.TokenService
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.CookieValue
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.RestController
import javax.servlet.http.Cookie
import javax.servlet.http.HttpServletResponse

@RestController
@RequestMapping("users")
class UserController(
    private val auth: Auth
) {

    @PostMapping("login")
    fun getUserName(@RequestParam name: String, response: HttpServletResponse): ResponseEntity<*>? {
        val newJwtCookie = auth.login(name)
        val cookie = Cookie("jwt", newJwtCookie)
        cookie.maxAge = TokenService.expirationTime  //30 min
        //add cookie to response
        response.addCookie(cookie)

        return ResponseEntity.ok(newJwtCookie)
    }

    @GetMapping("me")
    fun getUserName(@CookieValue("jwt") jwtCookie: String): ResponseEntity<*>? {
        val user = auth.getUserPrincipal(jwtCookie)
        return ResponseEntity.ok(user)
    }

    /*@GetMapping
    fun get(
        auth: Authentication,
        @RequestParam reviewId: Long,
        @RequestParam page: Int?,
        @RequestParam pageSize: Int?,
        @RequestParam accessOwner: String?,
        @RequestParam status: AccessReviewStatus?,
    ): ResponseEntity<*> {
        return ResponseEntity.ok(listAccessUseCase.execute(request))
    }


    @GET()
    @Path("me")
    @PermitAll
    public Response hello(@CookieParam("jwt") String jwtCookie) throws ParseException {
        User user = auth.getUserPrincipal(jwtCookie);
        return Response.ok(user).build();
    }

    @POST
    @Path("login")
    public Response getUserName(@Param String name){
        String newJwtCookie = auth.login(name);
        return Response.ok(newJwtCookie).cookie(new NewCookie("jwt", newJwtCookie)).build();
    }


    @Transactional
    @POST
    @Path("post")
    public Response save(@CookieParam("jwt") String jwtCookie, Post postParam) throws ParseException {
        User user = auth.getUserPrincipal(jwtCookie);
        postParam.setUser(user);
        posts.persist(postParam);
        return Response.ok(postParam).build();
    }

    */
}