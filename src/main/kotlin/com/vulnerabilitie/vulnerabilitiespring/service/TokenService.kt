package com.vulnerabilitie.vulnerabilitiespring.service

import com.vulnerabilitie.vulnerabilitiespring.config.Initialize
import com.vulnerabilitie.vulnerabilitiespring.exception.ExpiredTokenException
import com.vulnerabilitie.vulnerabilitiespring.exception.InvalidTokenException
import io.jsonwebtoken.Claims
import io.jsonwebtoken.Jwts
import io.jsonwebtoken.SignatureAlgorithm
import org.slf4j.LoggerFactory
import org.springframework.stereotype.Service
import java.util.*

@Service
class TokenService {
    private val key = "String Secret"

    fun generateToken(name: String): String {
        return Jwts.builder()
            .setIssuedAt(Date(System.currentTimeMillis()))
            .setSubject(name)
            .setExpiration(Date(System.currentTimeMillis() + expirationTime))
            .signWith(SignatureAlgorithm.HS256, key)
            .compact()
    }

    fun validate(token: String): Boolean {
        return try {
            val claims: Claims = getClaims(token)
            tokenExpired(claims)
            true
        } catch (et: ExpiredTokenException) {
            et.printStackTrace()
            throw et
        } catch (e: Exception) {
            e.printStackTrace()
            throw InvalidTokenException()
        }
    }

    fun getPayload(token: String): String {
        val claims: Claims = getClaims(token)
        return  claims.subject
    }

    private fun decodeToken(token: String): Claims {
        return Jwts.parser()
            .setSigningKey(key)
            .parseClaimsJws(token)
            .body
    }

    private fun getClaims(token: String): Claims {
        val claims: Claims = decodeToken(token)
        log.info(claims.issuer)
        log.info(claims.issuedAt.toString())
        return claims
    }

    private fun tokenExpired(claims: Claims) {
        if (claims.expiration.before(Date(System.currentTimeMillis()))) throw ExpiredTokenException()
        log.info(claims.expiration.toString())
    }

    companion object {
        //30 min
        const val expirationTime: Int = 1800000
        private val log = LoggerFactory.getLogger(TokenService::class.java)
    }

}